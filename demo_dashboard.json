{
  "title": "Demo dashboard",
  "image": null,
  "mobileHide": false,
  "mobileOrder": null,
  "configuration": {
    "description": "",
    "widgets": {
      "4b1fbd14-3364-51e3-e20e-5f082eb54c31": {
        "isSystemType": true,
        "bundleAlias": "input_widgets",
        "typeAlias": "update_server_string_attribute",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 7.5,
        "sizeY": 3,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "bd710ea4-f572-2c54-74a1-7e39ecc2e934",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "newNote",
                  "type": "attribute",
                  "label": "newNote",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.5435573851444364
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "8px",
          "settings": {
            "showLabel": true,
            "isRequired": false,
            "showResultMessage": false,
            "labelValue": "Note (markdown style enable)"
          },
          "title": "New Update server string attribute",
          "dropShadow": true,
          "enableFullscreen": true,
          "enableDataExport": false,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "useDashboardTimewindow": true,
          "showLegend": false,
          "actions": {
            "headerButton": [
              {
                "name": "Update notes",
                "icon": "arrow_upwards",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "let filterAttribute = \"Note\";\nlet thisAttribute = \"newNote\";\nlet backupAttribute = \"backupNote\";\n\nlet attributes = {};\n\nwidgetContext.attributeService.getEntityAttributes(entityId, \"SERVER_SCOPE\").subscribe(\n    // On success\n    function(data) {\n        // Get all attributes\n        if (data.length) {\n            for (let i = 0; i < data.length; i++) {\n                attributes[data[i].key] = data[i].value;\n            }\n        }\n\n        // Select attribute of interest and convert string to array\n        let filterAttributeValue = attributes[filterAttribute];\n        let thisAttributeValue = attributes[thisAttribute];\n\n        let date = new Date(Date.now()).toLocaleString(\"sv-SE\");\n        let newAttributeValue = filterAttributeValue + \"-> **\" + date + \"**<br>\" + thisAttributeValue + \"<br>\";\n        \n        let updatedAttribute;\n        let backupAttributeValue;\n        \n        // Update Note\n        updatedAttribute = [{\n            key: filterAttribute,\n            value: newAttributeValue\n        }];\n        backupAttributeValue = [{\n            key: backupAttribute,\n            value: newAttributeValue\n        }];\n        \n        updateEntityAttribute(entityId, \"SERVER_SCOPE\", updatedAttribute);\n        updateEntityAttribute(entityId, \"SERVER_SCOPE\", backupAttributeValue);\n        \n        \n        // Clear current note\n        updatedAttribute = [{\n            key: thisAttribute,\n            value: \"\"\n        }];\n        updateEntityAttribute(entityId, \"SERVER_SCOPE\", updatedAttribute);\n    });\n\nfunction updateEntityAttribute(entityId, scope, updatedAttribute) {\n    // Save attribute in HTML format\n    widgetContext.attributeService.saveEntityAttributes(entityId, scope, updatedAttribute).subscribe(\n        // On sucess\n        function() {\n            widgetContext.showSuccessToast('Note saved!');\n        },\n        // On error\n        function(error) {\n            widgetContext.dialogs.alert('Failed to updated attributes', JSON.stringify(error));\n        }\n    );\n\n}",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "58ec1e00-dbd8-c441-c445-ff365376c3de"
              }
            ]
          },
          "showTitleIcon": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": ""
        },
        "row": 0,
        "col": 0,
        "id": "4b1fbd14-3364-51e3-e20e-5f082eb54c31"
      },
      "d4a0c416-6b0d-f133-37c5-e1567e590410": {
        "isSystemType": true,
        "bundleAlias": "cards",
        "typeAlias": "markdown_card",
        "type": "latest",
        "title": "New widget",
        "image": null,
        "description": null,
        "sizeX": 5,
        "sizeY": 3.5,
        "config": {
          "datasources": [
            {
              "type": "entity",
              "name": null,
              "entityAliasId": "bd710ea4-f572-2c54-74a1-7e39ecc2e934",
              "filterId": null,
              "dataKeys": [
                {
                  "name": "Note",
                  "type": "attribute",
                  "label": "Note",
                  "color": "#2196f3",
                  "settings": {},
                  "_hash": 0.6442911390829249
                }
              ]
            }
          ],
          "timewindow": {
            "realtime": {
              "timewindowMs": 60000
            }
          },
          "showTitle": false,
          "backgroundColor": "#fff",
          "color": "rgba(0, 0, 0, 0.87)",
          "padding": "0px",
          "settings": {
            "useMarkdownTextFunction": false,
            "markdownTextPattern": "###### Notes \n\n${Note}"
          },
          "title": "New Markdown/HTML Card",
          "showTitleIcon": false,
          "iconColor": "rgba(0, 0, 0, 0.87)",
          "iconSize": "24px",
          "titleTooltip": "",
          "dropShadow": true,
          "enableFullscreen": true,
          "widgetStyle": {},
          "titleStyle": {
            "fontSize": "16px",
            "fontWeight": 400
          },
          "showLegend": false,
          "enableDataExport": false,
          "widgetCss": "",
          "pageSize": 1024,
          "noDataDisplayMessage": "",
          "actions": {
            "headerButton": [
              {
                "name": "Add note",
                "icon": "comment",
                "useShowWidgetActionFunction": true,
                "showWidgetActionFunction": "return true;",
                "type": "customPretty",
                "customHtml": "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\" (ngSubmit)=\"save()\" class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit {{entityType.toLowerCase()}} {{entityName}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\" fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                    <mat-label>Textarea</mat-label>\n                    <textarea matInput></textarea>\n            </mat-form-field>\n        </div>\n\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\" type=\"button\" [disabled]=\"(isLoading$ | async)\" (click)=\"cancel()\"\n            cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\" type=\"submit\"\n            [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Save\n        </button>\n    </div>\n</form>",
                "customCss": "",
                "customFunction": "\n// Define API variables\nlet $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\n\n// Open dialog box\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\n\n// Callback function for dialog box\nfunction EditEntityDialogController(instance) {\n    \n    // Question: instance represent HTML form??\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entityType = entityId.entityType;\n    vm.attributes = {};\n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        entityName: ['', [vm.validators.required]],\n        entityType: [null],\n        entityLabel: [null],\n        type: ['', [vm.validators.required]],\n        attributes: vm.fb.group({\n            latitude: [null],\n            longitude: [null],\n            address: [null],\n            owner: [null],\n            number: [null, [vm.validators.pattern(/^-?[0-9]+$/)]],\n            booleanValue: [false]\n        }),\n    });\n\n    // Get Entity attributes (Entity = Device or Asset)\n    getEntityInfo();\n\n    vm.cancel = function () {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function () {\n        vm.editEntityFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveAttributes(entityId),\n            saveEntity()\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n    function getEntityAttributes(attributes) {\n        for (var i = 0; i < attributes.length; i++) {\n            vm.attributes[attributes[i].key] = attributes[i].value;\n        }\n    }\n\n\n    function getEntityInfo() {\n        widgetContext.rxjs.forkJoin([\n            attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE')\n        ]).subscribe(\n            function (data) {\n                console.log(data)\n                getEntityAttributes(data[2]);\n                vm.entity = data[3];\n                vm.editEntityFormGroup.patchValue({\n                    attributes: vm.attributes,\n                }, { emitEvent: false });\n            }\n        );\n    }\n\n    function saveAttributes(entityId) {\n        let attributes = vm.editEntityFormGroup.get('attributes').value;\n        let attributesArray = [];\n        for (let key in attributes) {\n            if (attributes[key] !== vm.attributes[key]) {\n                attributesArray.push({ key: key, value: attributes[key] });\n            }\n        }\n        if (attributesArray.length > 0) {\n            return attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", attributesArray);\n        }\n        return widgetContext.rxjs.of([]);\n    }\n\n}",
                "customResources": [],
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "cc3619ea-4b2b-b439-c434-25999eef716b"
              },
              {
                "name": "Delete all notes",
                "icon": "delete_forever",
                "useShowWidgetActionFunction": null,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "widgetContext.dialogs.confirm(\"Delete all notes\", \"Are you sure you want to proceed?\").subscribe(\n    // On sucess\n    function (x) {\n        if (x) {\n            // Select attribute to clear\n            let filterAttribute = \"Note\";\n            let updatedAttribute = [{\n                key: filterAttribute,\n                value: \"\"\n            }];\n\n            // Save attribute\n            widgetContext.attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", updatedAttribute).subscribe(\n                // On sucess\n                function () {\n                    widgetContext.showSuccessToast('Notes deleted!');\n                },\n                // On error\n                function (error) {\n                    widgetContext.dialogs.alert('Failed to delete notes', JSON.stringify(error));\n                }\n            );\n        }\n    }\n)\n",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "41e823f5-0f79-288d-8089-da941d816249"
              },
              {
                "name": "Delete last note",
                "icon": "playlist_remove",
                "useShowWidgetActionFunction": false,
                "showWidgetActionFunction": "return true;",
                "type": "custom",
                "customFunction": "widgetContext.dialogs.confirm(\"Delete last note\", \"Are you sure you want to proceed?\").subscribe(\n    // On sucess (click of OK button)\n    function (x) {\n        if (x) {\n            // Select attribute to clear\n            let filterAttribute = \"Note\";\n            let entityAttribute;\n            let attributes = {};\n            let updatedAttribute = [{\n                key: filterAttribute,\n                value: \"\"\n            }];\n\n            // 1) Read current Notes\n            widgetContext.attributeService.getEntityAttributes(entityId, \"SERVER_SCOPE\").subscribe(\n                // On success\n                function (data) {\n                    // Get all attributes\n                    if (data.length) {\n                        for (let i = 0; i < data.length; i++) {\n                            attributes[data[i].key] = data[i].value;\n                        }\n                    }\n\n                    // Select attribute of interest and convert string to array\n                    entityAttribute = attributes[filterAttribute]\n                    \n                    // Notes are separate using '->' characters\n                    let entityAttributeArray = entityAttribute.split('->')\n                    updatedAttribute[0].value = entityAttributeArray.slice(0,-1).join('->')\n                    //console.log(entityAttribute)\n\n                    // 2) Save attribute after modification\n                    widgetContext.attributeService.saveEntityAttributes(entityId, \"SERVER_SCOPE\", updatedAttribute).subscribe(\n                        // On sucess\n                        function () {\n                            widgetContext.showSuccessToast('Last note deleted!');\n                        },\n                        // On error\n                        function (error) {\n                            widgetContext.dialogs.alert('Failed to delete last note', JSON.stringify(error));\n                        }\n                    );\n                }\n            );\n        }\n    }\n)",
                "openInSeparateDialog": false,
                "openInPopover": false,
                "id": "b20e9eca-6807-38c8-ee58-bd013aed103a"
              }
            ]
          }
        },
        "row": 0,
        "col": 0,
        "id": "d4a0c416-6b0d-f133-37c5-e1567e590410"
      }
    },
    "states": {
      "default": {
        "name": "Demo site",
        "root": true,
        "layouts": {
          "main": {
            "widgets": {
              "4b1fbd14-3364-51e3-e20e-5f082eb54c31": {
                "sizeX": 6,
                "sizeY": 3,
                "row": 0,
                "col": 7
              },
              "d4a0c416-6b0d-f133-37c5-e1567e590410": {
                "sizeX": 7,
                "sizeY": 12,
                "row": 0,
                "col": 0
              }
            },
            "gridSettings": {
              "backgroundColor": "#eeeeee",
              "columns": 24,
              "margin": 10,
              "backgroundSizeMode": "100%"
            }
          }
        }
      }
    },
    "entityAliases": {
      "bd710ea4-f572-2c54-74a1-7e39ecc2e934": {
        "id": "bd710ea4-f572-2c54-74a1-7e39ecc2e934",
        "alias": "Single device",
        "filter": {
          "type": "singleEntity",
          "resolveMultiple": false,
          "singleEntity": {
            "entityType": "DEVICE",
            "id": "bc6abf70-767f-11ed-8b62-e9eba22b9df6"
          }
        }
      }
    },
    "filters": {},
    "timewindow": {
      "displayValue": "",
      "hideInterval": false,
      "hideAggregation": false,
      "hideAggInterval": false,
      "hideTimezone": false,
      "selectedTab": 0,
      "realtime": {
        "realtimeType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "quickInterval": "CURRENT_DAY"
      },
      "history": {
        "historyType": 0,
        "interval": 1000,
        "timewindowMs": 60000,
        "fixedTimewindow": {
          "startTimeMs": 1670340960675,
          "endTimeMs": 1670427360675
        },
        "quickInterval": "CURRENT_DAY"
      },
      "aggregation": {
        "type": "AVG",
        "limit": 25000
      }
    },
    "settings": {
      "stateControllerId": "entity",
      "showTitle": false,
      "showDashboardsSelect": true,
      "showEntitiesSelect": true,
      "showDashboardTimewindow": true,
      "showDashboardExport": true,
      "toolbarAlwaysOpen": true
    }
  },
  "externalId": null,
  "name": "Demo dashboard"
}